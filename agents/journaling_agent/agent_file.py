import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import json

from config.api_keys import get_api_key

class GoogleCalendarIntegration:
    """Google Calendar integration for wellness platform"""
    
    def __init__(self):
        self.api_key = get_api_key('google_calendar')
        self.calendar_id = 'primary'  # User's primary calendar
        
        if not self.api_key:
            logging.warning("Google Calendar API key not found. Calendar integration will be limited.")
    
    async def schedule_workout_session(self, workout_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Schedule workout session in Google Calendar"""
        try:
            event_data = self._create_workout_event_data(workout_data)
            
            # In production, this would call the actual Google Calendar API
            # For demo purposes, we'll simulate the API call
            result = await self._simulate_calendar_api_call('create_event', event_data)
            
            if result:
                logging.info(f"Workout session scheduled: {workout_data.get('workout_name', 'Workout')}")
                return {
                    'event_id': result.get('event_id'),
                    'calendar_link': result.get('calendar_link'),
                    'scheduled_time': event_data['start']['dateTime'],
                    'duration_minutes': workout_data.get('duration_minutes', 60),
                    'status': 'scheduled'
                }
            
            return None
            
        except Exception as e:
            logging.error(f"Error scheduling workout session: {e}")
            return None
    
    def _create_workout_event_data(self, workout_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create Google Calendar event data for workout"""
        workout_name = workout_data.get('workout_name', 'Workout Session')
        start_time = datetime.fromisoformat(workout_data.get('scheduled_time'))
        duration_minutes = workout_data.get('duration_minutes', 60)
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        workout_type = workout_data.get('workout_type', 'General')
        exercises = workout_data.get('exercises', [])
        
        description_parts = [
            f"Workout Type: {workout_type}",
            f"Duration: {duration_minutes} minutes"
        ]
        
        if exercises:
            description_parts.append("Exercises:")
            for exercise in exercises[:5]:  # Limit to 5 exercises
                description_parts.append(f"- {exercise.get('name', 'Exercise')}")
        
        description_parts.extend([
            "",
            "Generated by Wellness AI Platform",
            "Remember to warm up before starting!",
            "Listen to your body and modify exercises as needed."
        ])
        
        event_data = {
            'summary': workout_name,
            'description': '\n'.join(description_parts),
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': workout_data.get('timezone', 'UTC')
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': workout_data.get('timezone', 'UTC')
            },
            'location': workout_data.get('location', 'Home Workout'),
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 15},
                    {'method': 'email', 'minutes': 60}
                ]
            },
            'colorId': '4',  # Green color for fitness events
            'attendees': [],
            'visibility': 'private'
        }
        
        return event_data
    
    async def schedule_therapy_session(self, therapy_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Schedule therapy session in Google Calendar"""
        try:
            event_data = self._create_therapy_event_data(therapy_data)
            result = await self._simulate_calendar_api_call('create_event', event_data)
            
            if result:
                logging.info("Therapy session scheduled")
                return {
                    'event_id': result.get('event_id'),
                    'calendar_link': result.get('calendar_link'),
                    'scheduled_time': event_data['start']['dateTime'],
                    'duration_minutes': therapy_data.get('duration_minutes', 50),
                    'status': 'scheduled'
                }
            
            return None
            
        except Exception as e:
            logging.error(f"Error scheduling therapy session: {e}")
            return None
    
    def _create_therapy_event_data(self, therapy_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create Google Calendar event data for therapy session"""
        session_type = therapy_data.get('session_type', 'Therapy Session')
        framework = therapy_data.get('therapeutic_framework', 'CBT')
        start_time = datetime.fromisoformat(therapy_data.get('scheduled_time'))
        duration_minutes = therapy_data.get('duration_minutes', 50)
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        description_parts = [
            f"Therapy Session - {framework}",
            f"Session Type: {session_type}",
            f"Duration: {duration_minutes} minutes",
            "",
            "This is a private therapy session.",
            "Please ensure you're in a quiet, comfortable space.",
            "",
            "Generated by Wellness AI Platform"
        ]
        
        event_data = {
            'summary': f"Therapy Session - {framework}",
            'description': '\n'.join(description_parts),
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': therapy_data.get('timezone', 'UTC')
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': therapy_data.get('timezone', 'UTC')
            },
            'location': 'Virtual Session',
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 10},
                    {'method': 'email', 'minutes': 30}
                ]
            },
            'colorId': '9',  # Blue color for therapy sessions
            'attendees': [],
            'visibility': 'private',
            'transparency': 'opaque'  # Show as busy
        }
        
        return event_data
    
    async def schedule_wellness_reminder(self, reminder_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Schedule wellness activity reminder"""
        try:
            event_data = self._create_reminder_event_data(reminder_data)
            result = await self._simulate_calendar_api_call('create_event', event_data)
            
            if result:
                logging.info(f"Wellness reminder scheduled: {reminder_data.get('activity_type')}")
                return {
                    'event_id': result.get('event_id'),
                    'calendar_link': result.get('calendar_link'),
                    'scheduled_time': event_data['start']['dateTime'],
                    'activity_type': reminder_data.get('activity_type'),
                    'status': 'scheduled'
                }
            
            return None
            
        except Exception as e:
            logging.error(f"Error scheduling wellness reminder: {e}")
            return None
    
    def _create_reminder_event_data(self, reminder_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create Google Calendar event data for wellness reminder"""
        activity_type = reminder_data.get('activity_type', 'Wellness Activity')
        start_time = datetime.fromisoformat(reminder_data.get('scheduled_time'))
        duration_minutes = reminder_data.get('duration_minutes', 15)
        end_time = start_time + timedelta(minutes=duration_minutes)
        
        activity_descriptions = {
            'journaling': 'Take a few minutes to reflect and write in your journal.',
            'mental_exercise': 'Practice your assigned mental health exercise.',
            'meal_planning': 'Review and plan your meals for optimal nutrition.',
            'mindfulness': 'Take a mindfulness break to center yourself.',
            'progress_review': 'Review your wellness progress and celebrate achievements.'
        }
        
        description = activity_descriptions.get(activity_type, 'Take time for your wellness activity.')
        
        event_data = {
            'summary': f"Wellness Reminder: {activity_type.replace('_', ' ').title()}",
            'description': f"{description}\n\nGenerated by Wellness AI Platform",
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': reminder_data.get('timezone', 'UTC')
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': reminder_data.get('timezone', 'UTC')
            },
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 0}
                ]
            },
            'colorId': '2',  # Green color for wellness reminders
            'attendees': [],
            'visibility': 'private',
            'transparency': 'transparent'  # Show as free time
        }
        
        return event_data
    
    async def _simulate_calendar_api_call(self, operation: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Simulate Google Calendar API call for demo purposes"""
        if not self.api_key:
            logging.warning("Google Calendar API key not available - using mock response")
        
        # Simulate API delay
        await asyncio.sleep(random.uniform(0.5, 1.5))
        
        # Generate mock response
        if operation == 'create_event':
            return {
                'event_id': f"mock_event_{datetime.now().timestamp()}",
                'calendar_link': f"https://calendar.google.com/calendar/event?eid=mock_{datetime.now().timestamp()}",
                'status': 'confirmed',
                'created': datetime.now().isoformat()
            }
        
        return None
    
    async def get_upcoming_wellness_events(self, days_ahead: int = 7) -> List[Dict[str, Any]]:
        """Get upcoming wellness events from calendar"""
        try:
            # In production, this would query the actual Google Calendar API
            # For demo, return mock upcoming events
            mock_events = self._generate_mock_upcoming_events(days_ahead)
            
            logging.info(f"Retrieved {len(mock_events)} upcoming wellness events")
            return mock_events
            
        except Exception as e:
            logging.error(f"Error retrieving upcoming events: {e}")
            return []
    
    def _generate_mock_upcoming_events(self, days_ahead: int) -> List[Dict[str, Any]]:
        """Generate mock upcoming wellness events for demo"""
        import random
        
        events = []
        base_time = datetime.now()
        
        event_types = [
            {'type': 'workout', 'duration': 60, 'color': '4'},
            {'type': 'therapy', 'duration': 50, 'color': '9'},
            {'type': 'journaling', 'duration': 15, 'color': '2'},
            {'type': 'meal_planning', 'duration': 20, 'color': '6'}
        ]
        
        for day in range(days_ahead):
            day_start = base_time + timedelta(days=day)
            
            # Generate 1-3 events per day
            num_events = random.randint(1, 3)
            
            for _ in range(num_events):
                event_type = random.choice(event_types)
                event_time = day_start.replace(
                    hour=random.randint(8, 20),
                    minute=random.choice([0, 15, 30, 45])
                )
                
                events.append({
                    'event_id': f"mock_{event_type['type']}_{event_time.timestamp()}",
                    'summary': f"{event_type['type'].replace('_', ' ').title()} Session",
                    'start_time': event_time.isoformat(),
                    'duration_minutes': event_type['duration'],
                    'event_type': event_type['type'],
                    'color': event_type['color']
                })
        
        return sorted(events, key=lambda x: x['start_time'])

# Global Google Calendar instance
google_calendar = GoogleCalendarIntegration()
